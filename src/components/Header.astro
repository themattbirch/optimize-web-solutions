---
// src/components/Header.astro
import { Image } from "astro:assets";
import darkLogo from "../assets/images/optimize-web-solutions-logo.png";
import lightLogo from "../assets/images/optimize-web-solutions-logo-light.webp";
import ThemeToggle from "./ThemeToggle.jsx";

const links = [
  { title: "Home", path: "/" },
  { title: "About", path: "/about" },
  { title: "Services", path: "/services" },
  { title: "Contact", path: "/contact" },
];
---

<header
  id="site-header"
  class="sticky top-0 z-50 w-full transition-colors duration-300
  
  data-[state=scrolled]:bg-white
  data-[state=scrolled]:shadow-sm
  dark:data-[state=scrolled]:bg-gray-950
  data-[state=on-hero]:bg-white
  dark:data-[state=on-hero]:bg-transparent
  dark:data-[state=on-hero]:shadow-none"
>
  <div
    class="mx-auto flex max-w-screen-xl items-center justify-between px-4 py-4 md:py-5"
  >
    <a href="/" aria-label="Optimize Web Solutions" class="shrink-0">
      <Image src={lightLogo} alt="" width="160" class="block dark:hidden" />
      <Image src={darkLogo} alt="" width="160" class="hidden dark:block" />
    </a>
    <div class="flex items-center gap-4">
      <ThemeToggle client:load />
      <nav class="hidden md:block">
        <ul class="flex items-center gap-8 font-heading">
          {
            links.map((l) => (
              <li>
                <a
                  href={l.path}
                  class="header-link relative text-gray-800 dark:text-gray-200 dark:data-[state=on-hero]:text-white after:absolute after:left-0 after:-bottom-0.5 after:h-0.5 after:w-0 after:bg-accent-secondary after:transition-[width] after:duration-300 hover:after:w-full"
                >
                  {l.title}
                </a>
              </li>
            ))
          }
          <li>
            <a
              href="tel:7035993188"
              class="rounded-full border-2 border-accent-secondary bg-[#E68A00]/90 px-6 py-2 font-bold text-gray-900 shadow-sm transition hover:border-[#CC7A00] hover:bg-[#CC7A00]"
            >
              Book Us
            </a>
          </li>
        </ul>
      </nav>
      <button id="mobile-toggle" class="p-2 md:hidden">
        <span
          class="block h-0.5 w-6 bg-gray-800 dark:bg-gray-200 dark:data-[state=on-hero]:bg-white"
        ></span>
        <span
          class="my-1 block h-0.5 w-6 bg-gray-800 dark:bg-gray-200 dark:data-[state=on-hero]:bg-white"
        ></span>
        <span
          class="block h-0.5 w-6 bg-gray-800 dark:bg-gray-200 dark:data-[state=on-hero]:bg-white"
        ></span>
      </button>
    </div>
  </div>
</header>

<script>
  const header = document.getElementById("site-header");
  if (header) {
    const setHeaderState = () => {
      const hero = document.querySelector(".-mt-24");
      // The script now ONLY sets the state. Nothing else.
      if (window.scrollY < 10 && hero) {
        header.dataset.state = "on-hero";
      } else {
        header.dataset.state = "scrolled";
      }
    };

    // We need to re-run this check if the theme changes
    const themeToggle = document.querySelector("theme-toggle");
    if (themeToggle) {
      // This assumes your ThemeToggle component has an id or can be selected.
      // A better way is to listen for a custom event from the component.
      // For now, let's just observe class changes on <html> as a fallback.
      new MutationObserver(() => setHeaderState()).observe(
        document.documentElement,
        {
          attributes: true,
          attributeFilter: ["class"],
        },
      );
    }

    // Run on page load and on scroll
    window.addEventListener("load", () => {
      setHeaderState();
      document.addEventListener("scroll", setHeaderState, { passive: true });
    });
  }
</script>
